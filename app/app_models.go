// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log      *zap.SugaredLogger
	Download *grimoire.Store[*Download]
	Episode  *grimoire.Store[*Episode]
	Feed     *grimoire.Store[*Feed]
	Medium   *grimoire.Store[*Medium]
	Message  *grimoire.Store[*Message]
	Minion   *grimoire.Store[*Minion]
	Movie    *grimoire.Store[*Movie]
	Pin      *grimoire.Store[*Pin]
	Release  *grimoire.Store[*Release]
	Request  *grimoire.Store[*Request]
	Series   *grimoire.Store[*Series]
	User     *grimoire.Store[*User]
	Watch    *grimoire.Store[*Watch]
}

func NewConnector(app *Application) (*Connector, error) {
	var s *Connection
	var err error

	s, err = app.Config.ConnectionFor("download")
	if err != nil {
		return nil, err
	}
	download, err := grimoire.New[*Download](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("episode")
	if err != nil {
		return nil, err
	}
	episode, err := grimoire.New[*Episode](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("feed")
	if err != nil {
		return nil, err
	}
	feed, err := grimoire.New[*Feed](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("medium")
	if err != nil {
		return nil, err
	}
	medium, err := grimoire.New[*Medium](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("message")
	if err != nil {
		return nil, err
	}
	message, err := grimoire.New[*Message](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("minion")
	if err != nil {
		return nil, err
	}
	minion, err := grimoire.New[*Minion](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("movie")
	if err != nil {
		return nil, err
	}
	movie, err := grimoire.New[*Movie](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("pin")
	if err != nil {
		return nil, err
	}
	pin, err := grimoire.New[*Pin](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("release")
	if err != nil {
		return nil, err
	}
	release, err := grimoire.New[*Release](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("request")
	if err != nil {
		return nil, err
	}
	request, err := grimoire.New[*Request](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("series")
	if err != nil {
		return nil, err
	}
	series, err := grimoire.New[*Series](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("user")
	if err != nil {
		return nil, err
	}
	user, err := grimoire.New[*User](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	s, err = app.Config.ConnectionFor("watch")
	if err != nil {
		return nil, err
	}
	watch, err := grimoire.New[*Watch](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}

	c := &Connector{
		Log:      app.Log.Named("db"),
		Download: download,
		Episode:  episode,
		Feed:     feed,
		Medium:   medium,
		Message:  message,
		Minion:   minion,
		Movie:    movie,
		Pin:      pin,
		Release:  release,
		Request:  request,
		Series:   series,
		User:     user,
		Watch:    watch,
	}

	return c, nil
}

type Download struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	MediumId  primitive.ObjectID `bson:"medium_id,omitempty" json:"medium_id,omitempty"`
	Auto      bool               `bson:"auto,omitempty" json:"auto,omitempty"`
	Multi     bool               `bson:"multi,omitempty" json:"multi,omitempty"`
	Force     bool               `bson:"force,omitempty" json:"force,omitempty"`
	Url       string             `bson:"url,omitempty" json:"url,omitempty"`
	ReleaseId string             `bson:"tdo_id" json:"release_id,omitempty"`
	Thash     string             `bson:"thash,omitempty" json:"thash,omitempty"`
	Selected  string             `bson:"selected,omitempty" json:"selected,omitempty"`
	Status    string             `bson:"status,omitempty" json:"status,omitempty"`
	Files     []*DownloadFile    `bson:"download_files" json:"download_files"`
	Medium    *Medium            `bson:"-" json:"medium,omitempty"`
}

type DownloadFile struct { // struct
	Id       primitive.ObjectID `bson:"_id" json:"id,omitempty"`
	MediumId primitive.ObjectID `bson:"medium_id,omitempty" json:"medium_id,omitempty"`
	Medium   *Medium            `bson:"medium,omitempty" json:"medium,omitempty"`
	Num      int                `bson:"num,omitempty" json:"num,omitempty"`
}

type Episode struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type           string             `bson:"_type" json:"type,omitempty"`
	SeriesId       primitive.ObjectID `bson:"series_id,omitempty" json:"series_id,omitempty"`
	SourceId       string             `bson:"source_id,omitempty" json:"source_id,omitempty"`
	Title          string             `bson:"title,omitempty" json:"title,omitempty"`
	Description    string             `bson:"description,omitempty" json:"description,omitempty"`
	Directory      string             `bson:"directory,omitempty" json:"directory,omitempty"`
	Search         string             `bson:"search,omitempty" json:"search,omitempty"`
	SeasonNumber   int                `bson:"season_number,omitempty" json:"season_number,omitempty"`
	EpisodeNumber  int                `bson:"episode_number,omitempty" json:"episode_number,omitempty"`
	AbsoluteNumber int                `bson:"absolute_number,omitempty" json:"absolute_number,omitempty"`
	Downloaded     bool               `bson:"downloaded,omitempty" json:"downloaded,omitempty"`
	Completed      bool               `bson:"completed,omitempty" json:"completed,omitempty"`
	Skipped        bool               `bson:"skipped,omitempty" json:"skipped,omitempty"`
	ReleaseDate    time.Time          `bson:"release_date,omitempty" json:"release_date,omitempty"`
	Paths          []*Path            `bson:"paths,omitempty" json:"paths,omitempty"`
	Cover          string             `bson:"-" json:"cover,omitempty"`
	Background     string             `bson:"-" json:"background,omitempty"`
	Watched        bool               `bson:"-" json:"watched,omitempty"`
	Active         bool               `bson:"-" json:"active,omitempty"`
	Favorite       bool               `bson:"-" json:"favorite,omitempty"`
	Unwatched      int                `bson:"-" json:"unwatched,omitempty"`
	Display        string             `bson:"-" json:"display,omitempty"`
}

type Feed struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name      string    `bson:"name,omitempty" json:"name,omitempty"`
	Url       string    `bson:"url,omitempty" json:"url,omitempty"`
	Source    string    `bson:"source,omitempty" json:"source,omitempty"`
	Type      string    `bson:"type,omitempty" json:"type,omitempty"`
	Active    bool      `bson:"active,omitempty" json:"active,omitempty"`
	Processed time.Time `bson:"processed,omitempty" json:"processed,omitempty"`
}

type Medium struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type           string             `bson:"_type" json:"type,omitempty"`
	Kind           primitive.Symbol   `bson:"kind,omitempty" json:"kind,omitempty"`
	Source         string             `bson:"source,omitempty" json:"source,omitempty"`
	SourceId       string             `bson:"source_id,omitempty" json:"source_id,omitempty"`
	ImdbId         string             `bson:"imdb_id,omitempty" json:"imdb_id,omitempty"`
	Title          string             `bson:"title,omitempty" json:"title,omitempty"`
	Description    string             `bson:"description,omitempty" json:"description,omitempty"`
	Display        string             `bson:"display,omitempty" json:"display,omitempty"`
	Directory      string             `bson:"directory,omitempty" json:"directory,omitempty"`
	Search         string             `bson:"search,omitempty" json:"search,omitempty"`
	SearchParams   *SearchParams      `bson:"search_params,omitempty" json:"search_params,omitempty"`
	Active         bool               `bson:"active,omitempty" json:"active,omitempty"`
	Downloaded     bool               `bson:"downloaded,omitempty" json:"downloaded,omitempty"`
	Completed      bool               `bson:"completed,omitempty" json:"completed,omitempty"`
	Skipped        bool               `bson:"skipped,omitempty" json:"skipped,omitempty"`
	Watched        bool               `bson:"watched,omitempty" json:"watched,omitempty"`
	Broken         bool               `bson:"broken,omitempty" json:"broken,omitempty"`
	Favorite       bool               `bson:"favorite,omitempty" json:"favorite,omitempty"`
	Unwatched      int                `bson:"unwatched,omitempty" json:"unwatched,omitempty"`
	ReleaseDate    time.Time          `bson:"release_date,omitempty" json:"release_date,omitempty"`
	Paths          []*Path            `bson:"paths,omitempty" json:"paths,omitempty"`
	Cover          string             `bson:"-" json:"cover,omitempty"`
	Background     string             `bson:"-" json:"background,omitempty"`
	SeriesId       primitive.ObjectID `bson:"series_id,omitempty" json:"series_id,omitempty"`
	SeasonNumber   int                `bson:"season_number,omitempty" json:"season_number,omitempty"`
	EpisodeNumber  int                `bson:"episode_number,omitempty" json:"episode_number,omitempty"`
	AbsoluteNumber int                `bson:"absolute_number,omitempty" json:"absolute_number,omitempty"`
}

type Message struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Level    string `bson:"level,omitempty" json:"level,omitempty"`
	Facility string `bson:"facility,omitempty" json:"facility,omitempty"`
	Message  string `bson:"message,omitempty" json:"message,omitempty"`
}

type Minion struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Kind     string           `bson:"kind,omitempty" json:"kind,omitempty"`
	Args     string           `bson:"args,omitempty" json:"args,omitempty"`
	Status   string           `bson:"status,omitempty" json:"status,omitempty"`
	Attempts []*MinionAttempt `bson:"attempts,omitempty" json:"attempts,omitempty"`
}

type MinionAttempt struct { // struct
	StartedAt  time.Time `bson:"started_at,omitempty" json:"started_at,omitempty"`
	Duration   float64   `bson:"duration,omitempty" json:"duration,omitempty"`
	Status     string    `bson:"status,omitempty" json:"status,omitempty"`
	Error      string    `bson:"error,omitempty" json:"error,omitempty"`
	Stacktrace []string  `bson:"stacktrace,omitempty" json:"stacktrace,omitempty"`
}

type Movie struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type         string           `bson:"_type" json:"type,omitempty"`
	Kind         primitive.Symbol `bson:"kind,omitempty" json:"kind,omitempty"`
	Source       string           `bson:"source,omitempty" json:"source,omitempty"`
	SourceId     string           `bson:"source_id,omitempty" json:"source_id,omitempty"`
	ImdbId       string           `bson:"imdb_id,omitempty" json:"imdb_id,omitempty"`
	Title        string           `bson:"title,omitempty" json:"title,omitempty"`
	Description  string           `bson:"description,omitempty" json:"description,omitempty"`
	Slug         string           `bson:"slug,omitempty" json:"slug,omitempty"`
	Text         []string         `bson:"text,omitempty" json:"text,omitempty"`
	Display      string           `bson:"display,omitempty" json:"display,omitempty"`
	Directory    string           `bson:"directory,omitempty" json:"directory,omitempty"`
	Search       string           `bson:"search,omitempty" json:"search,omitempty"`
	SearchParams *SearchParams    `bson:"search_params,omitempty" json:"search_params,omitempty"`
	Active       bool             `bson:"active,omitempty" json:"active,omitempty"`
	Downloaded   bool             `bson:"downloaded,omitempty" json:"downloaded,omitempty"`
	Completed    bool             `bson:"completed,omitempty" json:"completed,omitempty"`
	Skipped      bool             `bson:"skipped,omitempty" json:"skipped,omitempty"`
	Watched      bool             `bson:"watched,omitempty" json:"watched,omitempty"`
	Broken       bool             `bson:"broken,omitempty" json:"broken,omitempty"`
	Favorite     bool             `bson:"favorite,omitempty" json:"favorite,omitempty"`
	ReleaseDate  time.Time        `bson:"release_date,omitempty" json:"release_date,omitempty"`
	Paths        []*Path          `bson:"paths,omitempty" json:"paths,omitempty"`
	Cover        string           `bson:"-" json:"cover,omitempty"`
	Background   string           `bson:"-" json:"background,omitempty"`
}

type Path struct { // struct
	Id         primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`
	Type       primitive.Symbol   `bson:"type,omitempty" json:"type,omitempty"`
	Remote     string             `bson:"remote,omitempty" json:"remote,omitempty"`
	Local      string             `bson:"local,omitempty" json:"local,omitempty"`
	Extension  string             `bson:"extension,omitempty" json:"extension,omitempty"`
	Size       int                `bson:"size,omitempty" json:"size,omitempty"`
	Resolution int                `bson:"resolution,omitempty" json:"resolution,omitempty"`
	Bitrate    int                `bson:"bitrate,omitempty" json:"bitrate,omitempty"`
	Checksum   string             `bson:"checksum,omitempty" json:"checksum,omitempty"`
	UpdatedAt  time.Time          `bson:"updated_at,omitempty" json:"updated_at,omitempty"`
}

type Pin struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Pin        int    `bson:"pin,omitempty" json:"id"`
	Code       string `bson:"code,omitempty" json:"code,omitempty"`
	Token      string `bson:"token,omitempty" json:"authToken"`
	Product    string `bson:"product,omitempty" json:"product,omitempty"`
	Identifier string `bson:"identifier,omitempty" json:"clientIdentifier"`
}

type Release struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type        string    `bson:"type,omitempty" json:"type,omitempty"`
	Source      string    `bson:"source,omitempty" json:"source,omitempty"`
	Raw         string    `bson:"raw,omitempty" json:"raw,omitempty"`
	Title       string    `bson:"title,omitempty" json:"title,omitempty"`
	Description string    `bson:"description,omitempty" json:"description,omitempty"`
	Size        string    `bson:"size,omitempty" json:"size,omitempty"`
	View        string    `bson:"view,omitempty" json:"view,omitempty"`
	Download    string    `bson:"download,omitempty" json:"download,omitempty"`
	Infohash    string    `bson:"infohash,omitempty" json:"infohash,omitempty"`
	Name        string    `bson:"name,omitempty" json:"name,omitempty"`
	Season      int       `bson:"season,omitempty" json:"season,omitempty"`
	Episode     int       `bson:"episode,omitempty" json:"episode,omitempty"`
	Volume      int       `bson:"volume,omitempty" json:"volume,omitempty"`
	Checksum    string    `bson:"checksum,omitempty" json:"checksum,omitempty"`
	Group       string    `bson:"group,omitempty" json:"group,omitempty"`
	Author      string    `bson:"author,omitempty" json:"author,omitempty"`
	Verified    bool      `bson:"verified,omitempty" json:"verified,omitempty"`
	Widescreen  bool      `bson:"widescreen,omitempty" json:"widescreen,omitempty"`
	Uncensored  bool      `bson:"uncensored,omitempty" json:"uncensored,omitempty"`
	Bluray      bool      `bson:"bluray,omitempty" json:"bluray,omitempty"`
	Nzb         bool      `bson:"nzb,omitempty" json:"nzb,omitempty"`
	Resolution  string    `bson:"resolution,omitempty" json:"resolution,omitempty"`
	Encoding    string    `bson:"encoding,omitempty" json:"encoding,omitempty"`
	Quality     string    `bson:"quality,omitempty" json:"quality,omitempty"`
	PublishedAt time.Time `bson:"published_at,omitempty" json:"published_at,omitempty"`
}

type Request struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Title    string `bson:"title,omitempty" json:"title,omitempty"`
	User     string `bson:"user,omitempty" json:"user,omitempty"`
	Type     string `bson:"type,omitempty" json:"type,omitempty"`
	Source   string `bson:"source,omitempty" json:"source,omitempty"`
	SourceId string `bson:"source_id,omitempty" json:"source_id,omitempty"`
	Status   string `bson:"status,omitempty" json:"status,omitempty"`
}

type SearchParams struct { // struct
	Type       string `bson:"type,omitempty" json:"type,omitempty"`
	Verified   bool   `bson:"verified,omitempty" json:"verified,omitempty"`
	Group      string `bson:"group,omitempty" json:"group,omitempty"`
	Author     string `bson:"author,omitempty" json:"author,omitempty"`
	Resolution int    `bson:"resolution,omitempty" json:"resolution,omitempty"`
	Source     string `bson:"source,omitempty" json:"source,omitempty"`
	Uncensored bool   `bson:"uncensored,omitempty" json:"uncensored,omitempty"`
	Bluray     bool   `bson:"bluray,omitempty" json:"bluray,omitempty"`
}

type Series struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Type          string           `bson:"_type" json:"type,omitempty"`
	Kind          primitive.Symbol `bson:"kind,omitempty" json:"kind,omitempty"`
	Source        string           `bson:"source,omitempty" json:"source,omitempty"`
	SourceId      string           `bson:"source_id,omitempty" json:"source_id,omitempty"`
	ImdbId        string           `bson:"imdb_id,omitempty" json:"imdb_id,omitempty"`
	Title         string           `bson:"title,omitempty" json:"title,omitempty"`
	Description   string           `bson:"description,omitempty" json:"description,omitempty"`
	Slug          string           `bson:"slug,omitempty" json:"slug,omitempty"`
	Text          []string         `bson:"text,omitempty" json:"text,omitempty"`
	Display       string           `bson:"display,omitempty" json:"display,omitempty"`
	Directory     string           `bson:"directory,omitempty" json:"directory,omitempty"`
	Search        string           `bson:"search,omitempty" json:"search,omitempty"`
	SearchParams  *SearchParams    `bson:"search_params,omitempty" json:"search_params,omitempty"`
	Status        string           `bson:"status,omitempty" json:"status,omitempty"`
	Active        bool             `bson:"active,omitempty" json:"active,omitempty"`
	Downloaded    bool             `bson:"downloaded,omitempty" json:"downloaded,omitempty"`
	Completed     bool             `bson:"completed,omitempty" json:"completed,omitempty"`
	Skipped       bool             `bson:"skipped,omitempty" json:"skipped,omitempty"`
	Watched       bool             `bson:"watched,omitempty" json:"watched,omitempty"`
	Broken        bool             `bson:"broken,omitempty" json:"broken,omitempty"`
	Favorite      bool             `bson:"favorite,omitempty" json:"favorite,omitempty"`
	Unwatched     int              `bson:"-" json:"unwatched,omitempty"`
	ReleaseDate   time.Time        `bson:"release_date,omitempty" json:"release_date,omitempty"`
	Paths         []*Path          `bson:"paths,omitempty" json:"paths,omitempty"`
	Cover         string           `bson:"-" json:"cover,omitempty"`
	Background    string           `bson:"-" json:"background,omitempty"`
	CurrentSeason int              `bson:"-" json:"currentSeason,omitempty"`
	Seasons       []int            `bson:"-" json:"seasons,omitempty"`
	Episodes      []*Episode       `bson:"-" json:"episodes,omitempty"`
	Watches       []*Watch         `bson:"-" json:"watches,omitempty"`
}

type User struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name  string `bson:"name,omitempty" json:"name,omitempty"`
	Email string `bson:"email,omitempty" json:"email,omitempty"`
	Token string `bson:"token,omitempty" json:"token,omitempty"`
	Thumb string `bson:"thumb,omitempty" json:"thumb,omitempty"`
	Home  bool   `bson:"home,omitempty" json:"home,omitempty"`
	Admin bool   `bson:"admin,omitempty" json:"admin,omitempty"`
}

type Watch struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Username  string             `bson:"username,omitempty" json:"username,omitempty"`
	Player    string             `bson:"player,omitempty" json:"player,omitempty"`
	WatchedAt time.Time          `bson:"watched_at,omitempty" json:"watched_at,omitempty"`
	MediumId  primitive.ObjectID `bson:"medium_id,omitempty" json:"medium_id,omitempty"`
	Medium    *Medium            `bson:"-" json:"medium,omitempty"`
}
